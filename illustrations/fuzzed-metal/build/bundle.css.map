{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../fuzzed-metal.tsx"
  ],
  "sourcesContent": [
    "\n<script>\nimport { onMount } from 'svelte';\nimport { Vector3 } from 'three';\nimport { World } from '../common/with-material/world.js';\nimport { Sphere } from '../common/with-material/sphere.js';\nimport { Camera } from '../common/camera.js';\nimport { Lambertian, FuzzedMetal } from '../common/with-material/material.js';\n\n\nlet canvas;\nonMount(() => {\n  function generateColor(ray, world, depth) {\n    if (depth <= 0) {\n      return new Vector3(0, 0, 0);\n    }\n\n    const record = world.hit(ray, {\n      min: 0.001,\n      max: Number.MAX_SAFE_INTEGER\n    });\n\n    if (record) {\n      const {\n        scattered,\n        attenuation\n      } = record.material.scatter(ray, record);\n\n      if (scattered) {\n        const color = generateColor(scattered, world, depth - 1);\n        return color.multiply(attenuation);\n      }\n\n      return new Vector3(0, 0, 0);\n    }\n\n    const unitDirection = ray.direction.clone().normalize();\n    const t = 0.5 * (unitDirection.y + 1);\n    const blend = new Vector3(0.5, 0.7, 1.0).lerp(new Vector3(1, 1, 1), t);\n    return blend;\n  }\n\n  ;\n  const width = canvas.width;\n  const height = canvas.height;\n  const context = canvas.getContext('2d');\n  const imageData = context.getImageData(0, 0, width, height);\n  const world = new World().addObject(new Sphere(new Vector3(0, 0, 1), 0.5, new Lambertian(new Vector3(0.7, 0.3, 0.3)))).addObject(new Sphere(new Vector3(0, 100.5, 1), 100, new Lambertian(new Vector3(0.8, 0.8, 0)))).addObject(new Sphere(new Vector3(1, 0, 1), 0.5, new FuzzedMetal(new Vector3(0.8, 0.6, 0.2), 0.3))).addObject(new Sphere(new Vector3(-1, 0, 1), 0.5, new FuzzedMetal(new Vector3(0.8, 0.8, 0.8), 0.3)));\n  const camera = new Camera();\n  const samples = 50;\n  const maxDepth = 50;\n\n  for (let x = 0; x < width; ++x) {\n    for (let y = 0; y < height; ++y) {\n      const color = new Vector3(0, 0, 0);\n\n      for (let k = 0; k < samples; ++k) {\n        const u = (x + Math.random()) / width;\n        const v = (y + Math.random()) / height;\n        const ray = camera.getRay(u, v);\n        color.add(generateColor(ray, world, maxDepth));\n      }\n\n      color.divideScalar(samples);\n      const r = Math.sqrt(color.x);\n      const g = Math.sqrt(color.y);\n      const b = Math.sqrt(color.z);\n      const n = (y * width + x) * 4;\n      imageData.data[n] = r * 255;\n      imageData.data[n + 1] = g * 255;\n      imageData.data[n + 2] = b * 255;\n      imageData.data[n + 3] = 255;\n    }\n  }\n\n  context.putImageData(imageData, 0, 0);\n});\nlet width = 600;\nlet height = 300;\n</script>\n\n\n<div class=\"container\">\n        <canvas bind:this={canvas} width={width} height={height}></canvas>\n    </div>\n\n\n<style>\n@import url(https://fonts.googleapis.com/css?family=Nunito:400,600|Sanchez:400,400i|Cousine:400;700);\n\n.container {\n    margin-top: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n</style>"
  ],
  "names": [],
  "mappings": "AAwFA,QAAQ,IAAI,uFAAuF,CAAC,CAAC,AAErG,UAAU,eAAC,CAAC,AACR,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACvB,CAAC"
}