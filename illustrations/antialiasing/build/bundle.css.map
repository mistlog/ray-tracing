{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../section.tsx"
  ],
  "sourcesContent": [
    "\n<script>\nimport { onMount } from 'svelte';\nimport { Vector3 } from 'three';\nimport { World } from '../../common/world.js';\nimport { Sphere } from '../../common/sphere.js';\nimport { Camera } from '../../common/camera.js';\n\n\nlet canvas;\nonMount(() => {\n  function generateColor(ray, world) {\n    const record = world.hit(ray, {\n      min: 0,\n      max: Number.MAX_SAFE_INTEGER\n    });\n\n    if (record) {\n      const {\n        normal\n      } = record;\n      return new Vector3(0.5 * (normal.x + 1), 0.5 * (-normal.y + 1), 0.5 * (-normal.z + 1));\n    }\n\n    const unitDirection = ray.direction.clone().normalize();\n    const t = 0.5 * (unitDirection.y + 1);\n    const blend = new Vector3(0.5, 0.7, 1.0).lerp(new Vector3(1, 1, 1), t);\n    return blend;\n  }\n\n  ;\n  const width = canvas.width;\n  const height = canvas.height;\n  const context = canvas.getContext('2d');\n  const imageData = context.getImageData(0, 0, width, height);\n  const world = new World().addObject(new Sphere(new Vector3(0, 0, 1), 0.5)).addObject(new Sphere(new Vector3(0, 100.5, 1), 100));\n  const camera = new Camera();\n  const samples = 50;\n\n  for (let x = 0; x < width; ++x) {\n    for (let y = 0; y < height; ++y) {\n      const color = new Vector3(0, 0, 0);\n\n      for (let k = 0; k < samples; ++k) {\n        const u = (x + Math.random()) / width;\n        const v = (y + Math.random()) / height;\n        const ray = camera.getRay(u, v);\n        color.add(generateColor(ray, world));\n      }\n\n      color.divideScalar(samples);\n      const n = (y * width + x) * 4;\n      imageData.data[n] = color.x * 255;\n      imageData.data[n + 1] = color.y * 255;\n      imageData.data[n + 2] = color.z * 255;\n      imageData.data[n + 3] = 255;\n    }\n  }\n\n  context.putImageData(imageData, 0, 0);\n});\nlet width = 600;\nlet height = 300;\n</script>\n\n\n<div class=\"container\">\n        <canvas bind:this={canvas} width={width} height={height}></canvas>\n    </div>\n\n\n<style>\n.container {\n    display: flex;\n    align-items: center;\n    justify-content: center\n}\n</style>"
  ],
  "names": [],
  "mappings": "AAwEA,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM;AAC3B,CAAC"
}