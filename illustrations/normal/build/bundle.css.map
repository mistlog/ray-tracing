{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../section.tsx"
  ],
  "sourcesContent": [
    "\n<script>\nimport { onMount } from 'svelte';\nimport { Vector3, Ray } from 'three';\n\n\nlet canvas;\nonMount(() => {\n  function hitSphere(center, radius, ray) {\n    const oc = ray.origin.clone().sub(center);\n    const a = ray.direction.dot(ray.direction);\n    const b = 2.0 * oc.dot(ray.direction);\n    const c = oc.dot(oc) - radius * radius;\n    const Δ = b * b - 4 * a * c;\n\n    if (Δ < 0) {\n      return null;\n    }\n\n    return (-b - Math.sqrt(Δ)) / (2.0 * a);\n  }\n\n  function generateColor(ray) {\n    const center = new Vector3(0, 0, 1);\n    const radius = 0.5;\n    const intersection = hitSphere(center, radius, ray);\n\n    if (intersection != null) {\n      const normal = ray.at(intersection, new Vector3()).sub(center).normalize();\n      return new Vector3(0.5 * (normal.x + 1), 0.5 * (-normal.y + 1), 0.5 * (-normal.z + 1));\n    }\n\n    const unitDirection = ray.direction.clone().normalize();\n    const t = 0.5 * (unitDirection.y + 1);\n    const blend = new Vector3(0.5, 0.7, 1.0).lerp(new Vector3(1, 1, 1), t);\n    return blend;\n  }\n\n  ;\n  const topLeftCorner = new Vector3(-2, -1, 1);\n  const horizontal = new Vector3(4, 0, 0);\n  const vertical = new Vector3(0, 2, 0);\n  const origin = new Vector3(0, 0, 0);\n  const width = canvas.width;\n  const height = canvas.height;\n  const context = canvas.getContext('2d');\n  const imageData = context.getImageData(0, 0, width, height);\n\n  for (let x = 0; x < width; ++x) {\n    for (let y = 0; y < height; ++y) {\n      const u = x / width;\n      const v = y / height;\n      const direction = topLeftCorner.clone().addScaledVector(horizontal, u).addScaledVector(vertical, v);\n      const ray = new Ray(origin, direction);\n      const color = generateColor(ray);\n      const n = (y * width + x) * 4;\n      imageData.data[n] = color.x * 255;\n      imageData.data[n + 1] = color.y * 255;\n      imageData.data[n + 2] = color.z * 255;\n      imageData.data[n + 3] = 255;\n    }\n  }\n\n  context.putImageData(imageData, 0, 0);\n});\nlet width = 600;\nlet height = 300;\n</script>\n\n\n<div class=\"container\">\n        <canvas bind:this={canvas} width={width} height={height}></canvas>\n    </div>\n\n\n<style>\n.container {\n    display: flex;\n    align-items: center;\n    justify-content: center\n}\n</style>"
  ],
  "names": [],
  "mappings": "AA4EA,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM;AAC3B,CAAC"
}