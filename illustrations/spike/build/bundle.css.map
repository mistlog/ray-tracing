{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../spike.tsx"
  ],
  "sourcesContent": [
    "\n<script>\nimport { Scene, PerspectiveCamera, WebGLRenderer, Mesh, SphereGeometry, MeshNormalMaterial, Color, AxesHelper, Vector2, Raycaster, Vector3, Geometry, LineBasicMaterial, Line, HemisphereLight, CameraHelper } from \"three\";\nimport { OrbitControls } from 'three';\n\n\nlet container;\nlet camera;\nlet controls;\nlet renderer;\nlet scene;\nlet mouse;\nlet mouseMoved = false;\nlet raycaster;\nlet normal;\nlet line;\nfunction init() {\n  container = document.querySelector('body');\n  scene = new Scene();\n  scene.background = new Color(0x8FBCD4);\n  createMouse();\n  createRayCaster();\n  createCamera();\n  createControls();\n  createLights();\n  createMeshes();\n  createRenderer();\n  renderer.setAnimationLoop(() => {\n    update();\n    render();\n  });\n}\nfunction createRayCaster() {\n  raycaster = new Raycaster();\n}\nfunction createMouse() {\n  mouse = new Vector2();\n}\nfunction createCamera() {\n  camera = new PerspectiveCamera(35, container.clientWidth / container.clientHeight, 0.1, 1000);\n  camera.position.set(40, 40, 40);\n  const helper = new CameraHelper(camera);\n  scene.add(helper);\n}\nfunction createControls() {\n  controls = new OrbitControls(camera, container);\n}\nfunction createLights() {\n  const ambientLight = new HemisphereLight(0xddeeff, 0x202020, 5);\n  scene.add(ambientLight, null);\n}\nfunction createMeshes() {\n  {\n    const material = new MeshNormalMaterial();\n    const geometry = new SphereGeometry(5, 32, 32);\n    const sphere = new Mesh(geometry, material);\n    sphere.name = \"sphere\";\n  }\n  {\n    const points = [];\n    points.push(new Vector3(0, 0, 0));\n    points.push(new Vector3(10, 10, 10));\n    const geometry = new Geometry().setFromPoints(points);\n    const material = new LineBasicMaterial({\n      color: 0x0000ff,\n      linewidth: 1\n    });\n    line = new Line(geometry, material);\n    scene.add(line);\n  }\n  {\n    const axesHelper = new AxesHelper(25);\n    scene.add(axesHelper);\n  }\n}\nfunction createRenderer() {\n  renderer = new WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(container.clientWidth, container.clientHeight);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.gammaFactor = 2.2;\n  renderer.gammaOutput = true;\n  renderer.physicallyCorrectLights = true;\n  container.appendChild(renderer.domElement);\n}\nfunction update() {\n  controls.update();\n  raycaster.setFromCamera(mouse, camera);\n  {\n    const points = [];\n    points.push(new Vector3(0, 0, 0));\n    points.push(camera.position);\n    const geometry = new Geometry().setFromPoints(points);\n    const material = new LineBasicMaterial({\n      color: 0x0000ff,\n      linewidth: 1\n    });\n    line = new Line(geometry, material);\n    scene.add(line);\n  }\n}\nfunction render() {\n  renderer.render(scene, camera);\n}\nfunction onWindowResize() {\n  camera.aspect = container.clientWidth / container.clientHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(container.clientWidth, container.clientHeight);\n}\nfunction onMouseMove(event) {\n  mouseMoved = true;\n  mouse.x = event.clientX / window.innerWidth * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n}\nwindow.addEventListener('resize', onWindowResize);\nwindow.addEventListener('mousemove', onMouseMove, false);\ninit();\n</script>\n\n\n\n\n\n<style>\n.container {\n    margin-top: 20px;\n    margin-left: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n:global(html) {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n\n:global(body) {\n    margin: 0;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n</style>"
  ],
  "names": [],
  "mappings": "AAqIQ,IAAI,AAAE,CAAC,AACX,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,IAAI,AAClB,CAAC,AAEO,IAAI,AAAE,CAAC,AACX,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAC1B,CAAC"
}