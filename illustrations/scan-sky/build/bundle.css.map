{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../../scan-sky.tsx"
  ],
  "sourcesContent": [
    "<script context=\"module\">\nvar Trace;\n\n(function (Trace) {\n  Trace[Trace[\"Pixel\"] = 0] = \"Pixel\";\n  Trace[Trace[\"Ray\"] = 1] = \"Ray\";\n})(Trace || (Trace = {}));\n</script>\n<script>\nimport { onMount } from 'svelte';\nimport { Vector3, Ray } from 'three';\n\n\nconst illustrationID = \"illustration\";\nfunction* getColorGenerator() {\n  const width = 200;\n  const height = 100;\n  const topLeftCorner = new Vector3(-2, -1, 1);\n  const horizontal = new Vector3(4, 0, 0);\n  const vertical = new Vector3(0, 2, 0);\n  const origin = new Vector3(0, 0, 0);\n\n  function getColor(ray) {\n    const unitDirection = ray.direction.clone().normalize();\n    const t = 0.5 * (unitDirection.y + 1);\n    const blend = new Vector3(0.5, 0.7, 1.0).lerp(new Vector3(1, 1, 1), t);\n    return blend;\n  }\n\n  const step = 10;\n\n  for (let x = 0; x < width; x += step) {\n    for (let y = 0; y < height; y += step) {\n      const n = y * width + x;\n      const u = x / width;\n      const v = y / height;\n      const direction = topLeftCorner.clone().addScaledVector(horizontal, u).addScaledVector(vertical, v);\n      const ray = new Ray(origin, direction);\n      const color = getColor(ray);\n      yield {\n        pos: {\n          x,\n          y,\n          z: 1,\n          n\n        },\n        color: `rgb(${color.x * 255},${color.y * 255},${color.z * 255})`\n      };\n    }\n  }\n}\nlet colorGenerator = getColorGenerator();\nlet frameID = null;\nfunction resetPlot() {\n  cancelAnimationFrame(frameID);\n  colorGenerator = getColorGenerator();\n  const div = document.getElementById(illustrationID);\n  const data = div.data;\n  data[Trace.Pixel].x = [];\n  data[Trace.Pixel].y = [];\n  data[Trace.Pixel].z = [];\n  data[Trace.Pixel].marker.color = [];\n  data[Trace.Ray].x[1] = null;\n  data[Trace.Ray].y[1] = null;\n  data[Trace.Ray].z[1] = null;\n  globalThis.Plotly.redraw(illustrationID);\n}\nfunction updatePlot() {\n  const next = colorGenerator.next().value;\n\n  if (next) {\n    const div = document.getElementById(illustrationID);\n    const data = div.data;\n    const {\n      pos,\n      color\n    } = next;\n    const {\n      x,\n      y,\n      z,\n      n\n    } = pos;\n    data[Trace.Pixel].x[n] = x;\n    data[Trace.Pixel].y[n] = y;\n    data[Trace.Pixel].z[n] = z;\n    data[Trace.Pixel].marker.color[n] = color;\n    data[Trace.Ray].x[1] = x;\n    data[Trace.Ray].y[1] = y;\n    data[Trace.Ray].z[1] = z;\n    globalThis.Plotly.redraw(illustrationID);\n    frameID = requestAnimationFrame(updatePlot);\n  }\n}\nonMount(() => {\n  const data = [];\n  const pixelTrace = {\n    type: 'scatter3d',\n    mode: 'markers',\n    name: \"pixels\",\n    x: [],\n    y: [],\n    z: [],\n    marker: {\n      size: 5,\n      color: [],\n      colorscale: \"Greens\"\n    }\n  };\n  data[Trace.Pixel] = pixelTrace;\n  const rayTrace = {\n    type: 'scatter3d',\n    mode: 'lines+markers',\n    name: 'ray',\n    x: [100],\n    y: [50],\n    z: [0],\n    line: {\n      width: 2,\n      color: [\"#f00\", \"#00f\"]\n    },\n    marker: {\n      size: 2,\n      color: [\"#f00\", \"#00f\"],\n      colorscale: \"Greens\"\n    }\n  };\n  data[Trace.Ray] = rayTrace;\n  const layout = {\n    scene: {\n      camera: {\n        up: {\n          x: 0,\n          y: 0,\n          z: 1\n        },\n        center: {\n          x: 0,\n          y: 0,\n          z: 0\n        },\n        eye: {\n          x: 0.012768344414103178,\n          y: -1.5118330938936242,\n          z: -3.17011334634797\n        }\n      }\n    }\n  };\n  globalThis.Plotly.newPlot(illustrationID, data, layout);\n});\n</script>\n\n\n<div class=\"container\">\n        <button on:click={() => {\n  resetPlot();\n  requestAnimationFrame(updatePlot);\n}}>\n            Start\n        </button>\n        <div id={illustrationID}></div>\n    </div>\n\n\n<style>\n@import url(https://fonts.googleapis.com/css?family=Nunito:400,600|Sanchez:400,400i|Cousine:400;700);\n\n.container {\n    margin-top: 20px;\n    margin-left: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.loading {\n    align-self: center;\n    margin: auto 0;\n}\n\nbutton:not(:disabled):active {\n    background-color: #ddd;\n}\n\nbutton:focus {\n    border-color: #666;\n}\n\nbutton {\n    font-family: 'Sanchez';\n    font-size: 14px;\n    padding: 0.3em 0.5em;\n    margin: 0 0 0.5em 0;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 2px;\n    color: #333;\n    background-color: #f4f4f4;\n    outline: none;\n}\n.input {\n    display: flex;\n    flex-direction: column;\n}\n\n:global(html) {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n\n:global(body) {\n    margin: 0;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n</style>"
  ],
  "names": [],
  "mappings": "AAsKA,QAAQ,IAAI,uFAAuF,CAAC,CAAC,AAErG,UAAU,eAAC,CAAC,AACR,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,UAAU,AAC3B,CAAC,AAOD,qBAAM,KAAK,SAAS,CAAC,OAAO,AAAC,CAAC,AAC1B,gBAAgB,CAAE,IAAI,AAC1B,CAAC,AAED,qBAAM,MAAM,AAAC,CAAC,AACV,YAAY,CAAE,IAAI,AACtB,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,WAAW,CAAE,SAAS,CACtB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,KAAK,CAAC,KAAK,CACpB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CACnB,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,AACjB,CAAC,AAMO,IAAI,AAAE,CAAC,AACX,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,IAAI,AAClB,CAAC,AAEO,IAAI,AAAE,CAAC,AACX,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAC1B,CAAC"
}